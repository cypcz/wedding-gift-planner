/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../src/context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  GiftWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  GuestWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  UpsertWeddingInput: { // input type
    date: NexusGenScalars['DateTime']; // DateTime!
    id?: string | null; // ID
    partner1Name: string; // String!
    partner2Name: string; // String!
    partnersEmail?: string | null; // String
  }
  WeddingWhereUniqueInput: { // input type
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenRootTypes {
  Gift: { // root type
    id: string; // String!
    name: string; // String!
  }
  Guest: { // root type
    guestLink: string; // String!
    id: string; // String!
    plusGuests: string[]; // [String!]!
    plusX: number; // Int!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // String!
  }
  Wedding: { // root type
    date: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    partner1Name: string; // String!
    partner2Name: string; // String!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  GiftWhereUniqueInput: NexusGenInputs['GiftWhereUniqueInput'];
  GuestWhereUniqueInput: NexusGenInputs['GuestWhereUniqueInput'];
  UpsertWeddingInput: NexusGenInputs['UpsertWeddingInput'];
  WeddingWhereUniqueInput: NexusGenInputs['WeddingWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  DateTime: NexusGenScalars['DateTime'];
}

export interface NexusGenFieldTypes {
  Gift: { // field return type
    id: string; // String!
    name: string; // String!
    wedding: NexusGenRootTypes['Wedding']; // Wedding!
  }
  Guest: { // field return type
    guestLink: string; // String!
    id: string; // String!
    plusGuests: string[]; // [String!]!
    plusX: number; // Int!
    user: NexusGenRootTypes['User'] | null; // User
    wedding: NexusGenRootTypes['Wedding'][]; // [Wedding!]!
  }
  Mutation: { // field return type
    login: boolean; // Boolean!
    logout: boolean; // Boolean!
    register: boolean; // Boolean!
    upsertWedding: NexusGenRootTypes['Wedding']; // Wedding!
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    email: string; // String!
    id: string; // String!
    wedding: NexusGenRootTypes['Wedding'] | null; // Wedding
  }
  Wedding: { // field return type
    date: NexusGenScalars['DateTime']; // DateTime!
    gifts: NexusGenRootTypes['Gift'][]; // [Gift!]!
    guests: NexusGenRootTypes['Guest'][]; // [Guest!]!
    id: string; // String!
    partner1Name: string; // String!
    partner2Name: string; // String!
  }
}

export interface NexusGenArgTypes {
  Guest: {
    wedding: { // args
      after?: NexusGenInputs['WeddingWhereUniqueInput'] | null; // WeddingWhereUniqueInput
      before?: NexusGenInputs['WeddingWhereUniqueInput'] | null; // WeddingWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    login: { // args
      csrfToken: string; // String!
      idToken: string; // String!
      isProvider?: boolean | null; // Boolean
    }
    register: { // args
      email: string; // String!
      password: string; // String!
    }
    upsertWedding: { // args
      input: NexusGenInputs['UpsertWeddingInput']; // UpsertWeddingInput!
    }
  }
  Wedding: {
    gifts: { // args
      after?: NexusGenInputs['GiftWhereUniqueInput'] | null; // GiftWhereUniqueInput
      before?: NexusGenInputs['GiftWhereUniqueInput'] | null; // GiftWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    guests: { // args
      after?: NexusGenInputs['GuestWhereUniqueInput'] | null; // GuestWhereUniqueInput
      before?: NexusGenInputs['GuestWhereUniqueInput'] | null; // GuestWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Gift" | "Guest" | "Mutation" | "Query" | "User" | "Wedding";

export type NexusGenInputNames = "GiftWhereUniqueInput" | "GuestWhereUniqueInput" | "UpsertWeddingInput" | "WeddingWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}