### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum ApiErrors {
  Unknown
  UserAlreadyExists
}

enum Currency {
  AUD
  CZK
  EUR
  GBP
  HUF
  NZD
  RUB
  UAH
  USD
}

scalar DateTime

type Gift {
  contributions(after: GiftContributionWhereUniqueInput, before: GiftContributionWhereUniqueInput, first: Int, last: Int): [GiftContribution!]!
  currency: Currency!
  description: String
  id: String!
  imgUrl: String
  link: String
  name: String!
  price: Float!
}

type GiftContribution {
  amount: Int!
  contributor: Guest!
  currency: Currency!
  gift: Gift!
  id: String!
  note: String
}

input GiftContributionWhereUniqueInput {
  id: String
}

input GiftWhereUniqueInput {
  id: String
}

type Guest {
  firstName: String!
  id: String!
  lastName: String!
  plusGuests: [String!]!
  plusX: Int!
  status: GuestStatus!
  wedding: Wedding!
}

enum GuestStatus {
  ACCEPTED
  DECLINED
  WAITING
}

input GuestWhereUniqueInput {
  id: String
}

type Mutation {
  invitePartner(email: String!): Boolean!
  providerRegister: User
  register(input: RegisterInput!): User!
  resendVerificationEmail: Boolean!
  respondToInvitation(id: ID!, status: GuestStatus!): Guest!
  upsertGift(input: UpsertGiftInput!): Gift!
  upsertGuest(input: UpsertGuestInput!): Guest!
  upsertWedding(input: UpsertWeddingInput!): Wedding!
  verifyEmail(email: String!): User!
}

type Query {
  gift(id: ID!): Gift
  gifts: [Gift!]!
  guest(id: ID!): Guest
  guestInvitation(id: ID!): Guest
  guests: [Guest!]!
  me: User
  wedding: Wedding
}

input RegisterInput {
  email: String!
  password: String!
}

input UpsertGiftInput {
  currency: Currency!
  description: String
  id: ID
  imgUrl: String
  link: String
  name: String!
  price: Float!
  weddingId: ID!
}

input UpsertGuestInput {
  firstName: String!
  id: ID
  lastName: String!
  plusX: Int
  weddingId: ID!
}

input UpsertWeddingInput {
  date: DateTime!
  id: ID
  location: String!
  partner1Name: String!
  partner2Name: String!
  partnersEmail: String
  rsvpUntil: DateTime!
}

type User {
  email: String!
  emailVerified: Boolean!
  id: String!
  verificationResendLimit: DateTime!
  wedding: Wedding
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type Wedding {
  authors(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  date: DateTime!
  gifts(after: GiftWhereUniqueInput, before: GiftWhereUniqueInput, first: Int, last: Int): [Gift!]!
  guests(after: GuestWhereUniqueInput, before: GuestWhereUniqueInput, first: Int, last: Int): [Guest!]!
  id: String!
  location: String!
  partner1Name: String!
  partner2Name: String!
  partnersEmail: String
  rsvpUntil: DateTime!
}
