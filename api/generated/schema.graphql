### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum Currency {
  AUD
  CZK
  EUR
  GBP
  HUF
  NZD
  RUB
  UAH
  USD
}

scalar DateTime

type Gift {
  contributions(after: GiftContributionWhereUniqueInput, before: GiftContributionWhereUniqueInput, first: Int, last: Int): [GiftContribution!]!
  currency: Currency!
  description: String
  id: String!
  imgUrl: String
  link: String
  name: String!
  price: Int!
}

type GiftContribution {
  amount: Int!
  contributors(after: GuestWhereUniqueInput, before: GuestWhereUniqueInput, first: Int, last: Int): [Guest!]!
  currency: Currency!
  gift: Gift!
  id: String!
  note: String
}

input GiftContributionWhereUniqueInput {
  id: String
}

input GiftWhereUniqueInput {
  id: String
}

type Guest {
  firstName: String!
  guestLink: String!
  id: String!
  lastName: String!
  plusGuests: [String!]!
  plusX: Int!
  status: GuestStatus!
}

enum GuestStatus {
  ACCEPTED
  REJECTED
  WAITING
}

input GuestWhereUniqueInput {
  id: String
}

type Mutation {
  login(csrfToken: String!, idToken: String!, isProvider: Boolean): Boolean!
  logout: Boolean!
  register(email: String!, password: String!): Boolean!
  upsertGift(input: UpsertGiftInput!): Gift!
  upsertGuest(input: UpsertGuestInput!): Guest!
  upsertWedding(input: UpsertWeddingInput!): Wedding!
}

type Query {
  gift(id: ID!): Gift
  gifts: [Gift!]!
  guest(id: ID!): Guest
  guests: [Guest!]!
  me: User
  wedding: Wedding
}

input UpsertGiftInput {
  currency: Currency!
  description: String
  id: ID
  imgUrl: String
  link: String
  name: String!
  price: Int!
  weddingId: ID!
}

input UpsertGuestInput {
  firstName: String!
  id: ID
  lastName: String!
  plusX: Int
  weddingId: ID!
}

input UpsertWeddingInput {
  date: DateTime!
  id: ID
  partner1Name: String!
  partner2Name: String!
  partnersEmail: String
}

type User {
  email: String!
  id: String!
  wedding: Wedding
}

type Wedding {
  date: DateTime!
  gifts(after: GiftWhereUniqueInput, before: GiftWhereUniqueInput, first: Int, last: Int): [Gift!]!
  guests(after: GuestWhereUniqueInput, before: GuestWhereUniqueInput, first: Int, last: Int): [Guest!]!
  id: String!
  partner1Name: String!
  partner2Name: String!
}
