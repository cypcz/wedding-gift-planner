### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Gift {
  id: String!
  name: String!
  wedding: Wedding!
}

input GiftWhereUniqueInput {
  id: String
}

type Guest {
  guestLink: String!
  id: String!
  plusGuests: [String!]!
  plusX: Int!
  user: User
  wedding(after: WeddingWhereUniqueInput, before: WeddingWhereUniqueInput, first: Int, last: Int): [Wedding!]!
}

input GuestWhereUniqueInput {
  id: String
}

type Mutation {
  login(csrfToken: String!, idToken: String!, isProvider: Boolean): Boolean!
  logout: Boolean!
  register(email: String!, password: String!): Boolean!
  upsertWedding(input: UpsertWeddingInput!): Wedding!
}

type Query {
  me: User
}

input UpsertWeddingInput {
  date: DateTime!
  id: ID
  partner1Name: String!
  partner2Name: String!
  partnersEmail: String
}

type User {
  email: String!
  id: String!
  wedding: Wedding
}

type Wedding {
  date: DateTime!
  gifts(after: GiftWhereUniqueInput, before: GiftWhereUniqueInput, first: Int, last: Int): [Gift!]!
  guests(after: GuestWhereUniqueInput, before: GuestWhereUniqueInput, first: Int, last: Int): [Guest!]!
  id: String!
  partner1Name: String!
  partner2Name: String!
}

input WeddingWhereUniqueInput {
  id: String
}
